gem 'minitest'
require 'minitest/autorun'
require 'minitest/pride'
# sort_by() Sorts enum using a set of keys generated by mapping the values
# in enum through the given block. If no block is given, an enumerator is returned instead.
# Resource: https://mixandgo.com/learn/ruby-sort-and-sort-by
# Resource: https://www.rubyguides.com/2017/07/ruby-sort/

class SortByTest < Minitest::Test

  def test_sort_alphabetically
    words = ["broccoli", "Carrots", "FISH", "Bacon", "candy"]
    sorted = words.sort_by do |word|
      word.downcase # downcased everything before sorting it alphabetically . downcase gives parameter before sorting
    end
    assert_equal ["Bacon", "broccoli", "candy", "Carrots", "FISH"], sorted #sorted alphabetically
  end

  def test_sort_alphabetically_by_last_letter
    things = ["pill", "box", "glass", "water", "sponge"]
    sorted = things.sort_by do |thing|
      thing[-1]     #A negative index is assumed relative to the end of the array
      # --- that is, an index of -1 indicates the last element of the array, -2 is
      # the next to last element in the array, and so on.
    end
    assert_equal ["sponge", "pill", "water", "glass", "box"], sorted
  end

  def test_sort_by_distance

    distances = ["1cm", "9cm", "30cm", "4cm", "2cm"]
    sorted = distances.sort_by do |distance|
      distance.to_i
    end
    assert_equal ["1cm", "2cm", "4cm", "9cm", "30cm"], sorted
  end

  def test_sort_by_length

    words = ["heteromorph", "ancyloceratina", "bioengineering", "mathematical", "bug"]
    sorted = words.sort_by do |word|
      word.length
    end
    assert_equal ["bug", "heteromorph", "mathematical", "ancyloceratina", "bioengineering"], sorted
  end

  def test_sort_by_proximity_to_ten #positive difference from 10 regardless of pos/neg

    prices = [3.02, 9.91, 17.9, 10.01, 11.0]
    sorted = prices.sort_by do |price|
      (10 - price).abs      #works even if it's (price - 10).abs
      #(absolute value of 2 and 7 is 5. because 2 - 7 = -5. |-5| = 5. 7-2 = 5. |5| = 5 )
    end
    assert_equal [10.01, 9.91, 11.0, 3.02, 17.9], sorted
  end

  def test_sort_by_number_of_cents 

    prices = [3.02, 9.91, 7.9, 10.01, 11.0]
    sorted = prices.sort_by do |price|
      price - price.to_i # for ex. 3.02 - 3 (3.02 to integer gives you 3) == .02
    end
    assert_equal [11.0, 10.01, 3.02, 7.9, 9.91], sorted
  end

end
